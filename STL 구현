#include <iostream>
using namespace std;

template <class T>
class Node {
public:
    T data;
    Node<T>* next;

    Node(T element) {
        data = element;
        next = 0; 
    }
};

template <class T>
class singleLinkedList {
public:
    singleLinkedList() {
        head = 0; 
        tail = 0; 
    }

    ~singleLinkedList() {
        Node<T>* current = head;
        Node<T>* next;

        while (current != 0) { 
            next = current->next;
            delete current;
            current = next;
        }
    }

    void push(T element) {
        Node<T>* newNode = new Node<T>(element);

        if (head == 0) { 
            head = newNode;
            tail = newNode;
        }
        else {
            tail->next = newNode;
            tail = newNode;
        }
    }

    void show() {
        Node<T>* current = head;

        while (current != 0) { 
            cout << current->data << " -> ";
            current = current->next;
        }
        cout << endl;
    }

private:
    Node<T>* head;
    Node<T>* tail;
};

int main() {
    singleLinkedList<int>* idx = new singleLinkedList<int>;
    idx->push(1);
    idx->push(2);
    idx->push(3);
    idx->push(4);
    idx->push(5);
    idx->show();
    
}
